      // Take action when inside the geo-fence
      sim800.print("AT+CMGF=1\r");
      delay(1000);
      sim800.print("AT+CMGS=\"" + PHONE + "\"\r");
      delay(1000);
      sim800.print("Inside Geo-fence: http://maps.google.com/maps?q=loc:");
      sim800.print(gps.location.lat(), 6);
      sim800.print(",");
      sim800.print(gps.location.lng(), 6);
      delay(100);
      sim800.write(0x1A);
      delay(1000);
      Serial.println("Inside Geo-fence SMS Sent Successfully.");
    } else {
      Serial.println("Outside Geo-fence. No action taken.");
    }

    newData = false;
    delay(300);
  }
}

void sendSpeed() {
  boolean newData = false;
  for (unsigned long start = millis(); millis() - start < 2000;) {
    while (neogps.available()) {
      if (gps.encode(neogps.read())) {
        newData = true;
      }
    }
  }
  if (newData) {
    newData = false;
    Serial.print("Speed km/h= ");
    Serial.println(gps.speed.kmph());
    delay(300);

    // Check if the current speed is above a certain threshold
    if (gps.speed.kmph() > 10.0) {
      // Take action when speed is above the threshold
      sim800.print("AT+CMGF=1\r");
      delay(1000);
      sim800.print("AT+CMGS=\"" + PHONE + "\"\r");
      delay(1000);
      sim800.print("High Speed Alert! Speed km/h: ");
      sim800.print(gps.speed.kmph());
      delay(100);
      sim800.write(0x1A);
      delay(1000);
      Serial.println("High Speed SMS Sent Successfully.");
    } else {
      Serial.println("Speed is within acceptable range. No action taken.");
    }
  }
}

// Function to check if a location is inside the geo-fence boundaries
boolean isInsideGeoFence(double latitude, double longitude) {
  double distance = getDistance(latitude, longitude, geoFenceLat, geoFenceLng);
  return distance <= geoFenceRadius;
}

// Function to calculate the distance between two coordinates using Haversine formula
double getDistance(double lat1, double lon1, double lat2, double lon2) {
  double R = 6371.0; // Earth radius in kilometers
  double dLat = radians(lat2 - lat1);
  double dLon = radians(lon2 - lon1);
  double a = sin(dLat / 2.0) * sin(dLat / 2.0) + cos(radians(lat1)) * cos(radians(lat2)) * sin(dLon / 2.0) * sin(dLon / 2.0);
  double c = 2.0 * atan2(sqrt(a), sqrt(1.0 - a));
  double distance = R * c;
  return distance;
}
